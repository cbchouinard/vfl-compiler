{
  var p, parser, cs, leftVarNames, superLeftVarNames, rightVarNames, superRightVarNames, standardGapNames, getSuperViewName, getGapString; 

  p = parser = this;

  cs = parser.cs = [];

  parser.addC = function (c) {
    cs.push(c);
  };

  parser.addPreds = function (preds) {
    cs.push(preds);
  }
  
  leftVarNames = ["right", "bottom"];
  superLeftVarNames = ["left", "top"];
  rightVarNames = ["left", "top"];
  superRightVarNames = ["right", "bottom"];

  getSuperViewName = function (o) {
    if (o.in === undefined) {return "::this";}
    else {return o.in;}
  }

  parser.getLeftVar = function (view, dimension, o) {
    var varName;
    if (view === "|") {
      view = getSuperViewName(o);
      varName = superLeftVarNames[dimension];
    }
    else {
      varName = leftVarNames[dimension]
      
    }
    return view + "[" + varName + "]";
  }
  
  parser.getRightVar = function (view, dimension, o) {
    var varName;
    
    if (view === "|") {
      view = getSuperViewName(o);
      varName = superRightVarNames[dimension];
    }
    else {
      varName = rightVarNames[dimension];
      
    }
    return view + "[" + varName + "]";
  }
  
  standardGapNames = ["[hgap]", "[vgap]"];
  
  getGapString = function (g,d) {
    if (g === undefined) {return "";}
    if (g === "__STANDARD__") {g = standardGapNames[d];}
    return "+ " + g
  }

  
  parser.getConnectionString = function (c,d) {
    return (getGapString(c.gap,d) + " " + c.op).trim()
  }

  parser.getResults = function () {
    return [
      ["ccss"].concat(this.cs)
    ]
  }

  parser.error = function (m,l,c) {
    if (!!l && !!c) {m = m+ " {line:" + l + ", col:" + c + "}"} 
    console.error(m);
    return m;
  }

}

start
  = __ statements:(Statement*) __ { return (parser.getResults()); }

Statement
  = exp:VFLStatement EOS __ { return exp; }

VFLStatement
  = d:Dimension __ head:View
    tail:(__ Connection? __ View)* __ o:Options?
    __ s:StrengthAndWeight?         {
      var connection, view2, result, ccss, headView;
      result = head;
      headView = head.view
      for (var i = 0; i < tail.length; i++) {        
        connection = tail[i][1];
        view2 = tail[i][3].view;
        result = [
          //"c",
          connection,
          result,
          view2
        ];
        ccss = parser.getLeftVar(headView, d, o) + " " + 
          parser.getConnectionString(connection, d) + " " +
          parser.getRightVar(view2, d, o) + " " +
          s
        parser.addC(
          ccss.trim()
        );
        headView = view2;
      }
      return "VFL Statement";
    }

Dimension
  = ("@horizontal" / "@-gss-horizontal" / "@-gss-h") {return 0}
  / ("@vertical" / "@-gss-vertical" / "@-gss-v") {return 1}


Options
  = os:Option+  {
    var obj = {};
    for (var i = 0; i < os.length; i++) {    
      obj[os[i].key] = os[i].value;
    }
    return obj;
  }

Option
  = __ key:NameChars+ "(" value:NameChars+ ")" {return {key:key.join(''), value:value.join('')}}

View
  = "[" name:NameChars+ p:Predicate? "]"  {return {view:name.join(""),preds:p}}
  / "|"                                   {return {view:"|"}}
  // errorr 

Predicate
  = "(" preds:(Eq (PredOp / PredView / Number+)+ StrengthAndWeight?)+ ")" {return preds}

Eq
  = "=="
  / "<="
  / "<"
  / ">="
  / ">"

PredOp 
  = [+\-/*]

PredView
  = name:NameChars+  {return name.join("")}


Connection
  = "-" gap:GapChars+ "-"  {return {op:"==",gap:gap.join("")};}
  / "-"                    {return {op:"==",gap:"__STANDARD__"};}
  / "~" gap:GapChars+ "~"  {return {op:"<=",gap:gap.join("")};}
  / "~" "-" "~"            {return {op:"<=",gap:"__STANDARD__"};}
  / "~"                    {return {op:"<="};}
  / ""                     {return {op:"=="};}

GapChars 
  = [a-zA-Z0-9#._$]

  
StrengthAndWeight
  = "!" s:[a-zA-Z]+ w:([0-9]+)? {if (w.join){w=w.join("");} return "!" + s.join("") + w;}
  / "!" .? {return parser.error("Invalid Strength or Weight",line,column)}


Strength
  = ("require"  / "REQUIRE"  / "Require")  {return "require"}
  / ("strong"   / "STRONG"   / "Strong")   {return "strong"}
  / ("medium"   / "MEDIUM"   / "Medium")   {return "medium"}
  / ("weak"     / "WEAK"     / "Weak")     {return "weak"}
  / ("required" / "REQUIRED" / "Required") {return "require"}

  

NameChars
  = [a-zA-Z0-9#.\-_$]

NameCharsWithSpace
  = NameChars / " "

Literal
  = val:Number {
    return [ "number",
      val
    ]
  }

Number
  = Real / Integer

Integer
  = digits:[0-9]+ {
    return parseInt(digits.join(""));
  }

Real
  = digits:(Integer "." Integer) {
    return parseFloat(digits.join(""));
  }

SignedInteger
  = [-+]? [0-9]+

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOS
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__
  = (WhiteSpace / LineTerminatorSequence / Comment)*
