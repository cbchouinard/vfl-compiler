{
  var p, parser, cs, leftVarNames, superLeftVarNames, rightVarNames, superRightVarNames, standardGapNames, getSuperViewName, getGapString, sizeVarNames; 

  p = parser = this;
  
  
  p.trickleDownOptions = ["name"];
  sizeVarNames = p.sizeVarNames = ["width", "height"];
  leftVarNames = p.leftVarNames = ["right", "bottom"];
  superLeftVarNames = p.superLeftVarNames = ["left", "top"];
  rightVarNames = p.rightVarNames = ["left", "top"];
  superRightVarNames = p.superRightVarNames = ["right", "bottom"];

  cs = parser.cs = [];

  parser.addC = function (c) {
    cs.push(c);
  };

  parser.addPreds = function (view,preds,d) {
    var pred, ccss, eq, exps, exp;
    if (preds) {      
      for (var i = 0; i < preds.length; i++) {
        pred = preds[i];
        eq = pred[0];
        ccss = view + "[" + sizeVarNames[d] + "] " + eq + " ";
        exps = pred[1];
        for (var j = 0; j < exps.length; j++) {       
          exp = exps[j];
          if (exp[0] === "view") {
            exp = exp[1] + "[" + sizeVarNames[d] + "]";
          }
          ccss += exp + " ";
        }
        if (pred[2]) {
          ccss += pred[2];
        } // strength & weight
        cs.push(ccss.trim());
      }
    }
  };

  parser.defaultChainObject = {
    headEq: "==",
    value: "",
    tailEq: "",
    s: ""
  };

  parser.chainTailEqMap = {
    "<=": ">=",
    ">=": "<=",
    "==": "==",
    "<" : ">",
    ">" : "<" 
  };

  parser.addChains = function (views,o) {
    var chains, chain, prop, preds, connector, ccss, view, pred;
    chains = o.chains;
    if (chains) {     
      for (var i = 0; i < chains.length; i++) {
        chain = chains[i];
        prop = chain[0];
        preds = chain[1];
        if (preds === "" || !preds) {
          // load default chain predicate
          preds = [parser.defaultChainObject];
        } 
        for (var j = 0; j < preds.length; j++) {
          pred = preds[j];
          ccss = "";
          for (var k = 0; k < views.length - 1; k++) {
            view = views[k];  
            if (pred.headEq === "") {
              pred.headEq = parser.defaultChainObject.headEq;
            }
            ccss += " " + view + "[" + prop + "] " + pred.headEq;
            if (pred.value !== "") {
              ccss += " " + pred.value;
              if (views.length > 1) {
                if (pred.tailEq === "") {
                  pred.tailEq = parser.chainTailEqMap[pred.headEq];
                }
                ccss += " " + pred.tailEq;
              }
              else {
                ccss += " " + pred.s;                
                cs.push(ccss.trim());
              }
            }
          }
          if (views.length > 1) {
             ccss += " " + views[views.length-1] + "[" + prop + "]";
             ccss += p.getTrailingOptions(o);
             ccss += " " + pred.s;
             cs.push(ccss.trim());
          }
        }
      }
    } 
  };

  getSuperViewName = function (o) {
    if (o.in === undefined) {
      return "::this";
    }
    return o.in;
  };

  parser.getLeftVar = function (view, dimension, o, viewObj) {
    var varName, viewName;
    if (viewObj.isPoint) {
      return viewObj.pos;
    }
    else if (view === "|") {
      viewName = getSuperViewName(o);
      varName = superLeftVarNames[dimension];
    }
    else {
      viewName = view;
      varName = leftVarNames[dimension];
    }
    return viewName + "[" + varName + "]";
  };
  
  parser.getRightVar = function (view, dimension, o, viewObj) {
    var varName;
    if (viewObj.isPoint) {
      return viewObj.pos;
    }
    else if (view === "|") {
      view = getSuperViewName(o);
      varName = superRightVarNames[dimension];
    }
    else {
      varName = rightVarNames[dimension];
      
    }
    return view + "[" + varName + "]";
  };
  
  standardGapNames = ["[hgap]", "[vgap]"];
  
  getGapString = function (g,d,o,withContainer) {
    if (g === undefined) {return "";}
    if (g === "__STANDARD__") {
      // use gap if given with `gap()` or `outer-gap`
      if (withContainer && o['outer-gap']) {
        g = o['outer-gap'];
      } else if (o.gap) {
        g = o.gap;
      // else use standard var
      } else {
        g = standardGapNames[d];
      }
    }
    return "+ " + g;
  };

  parser.getConnectionString = function (c, d, o, withContainer) {
    
    return (getGapString(c.gap,d,o,withContainer) + " " + c.op).trim();
  };
      
  p.getTrailingOptions = function (o) {
    var string = "";
    if (o) {
      p.trickleDownOptions.forEach(function(key){
        if (o[key] != null) {
          string = string + " " + key + "(" + o[key] + ")";
        }
      });
    }
    return string;
  };
  
  p.getSW = function (o) {
    if (o.sw) {
      return " " + o.sw.trim();
    }
    return "";
  };
  

  parser.getResults = function () {
    return this.cs;
  };
  
  p.flatten = function (array, isShallow) {
    
    if (typeof array === "string") {return array;}
    
    var index = -1,
      length = array ? array.length : 0,
      result = [];

    while (++index < length) {
      var value = array[index];

      if (value instanceof Array) {
        Array.prototype.push.apply(result, isShallow ? value : p.flatten(value));
      }
      else {
        result.push(value);
      }
    }
    return result;
  }

  p.trim = function (x) {
    if (typeof x === "string") {return x.trim();}
    if (x instanceof Array) {return x.join("").trim();}
    return ""
  };

  p.join = function (a) {
    if (!a) {return "";}
    if (a.join){return a.join("");}
    return a;
  };
  
  p.stringify = function (array) {
    if (!array) {return "";}
    return p.trim(p.join(p.flatten(array)));
  };
  
}

start
  = __ Statement* __ { return parser.getResults(); }

debug 
  = __ vfl:Statement* __ { return parser.getResults().concat(vfl); }

Statement
  = exp:VFLStatement EOS __ { return exp; }

VFLStatement
  = d:Dimension __ head:View
    tail:(__ Connection? __ View)* __ o:Options {
      var connection, result, ccss, chainedViews, withContainer,
        tailView, tailViewObj, headView, headViewObj;      
      result = head;      
      headViewObj = head;
      headView = headViewObj.view;      
      chainedViews = [];      
      if (headView !== "|") {chainedViews.push(headView);}
      parser.addPreds(headView,head.preds,d);      
      for (var i = 0; i < tail.length; i++) {        
        connection = tail[i][1];
        tailViewObj = tail[i][3]
        tailView = tailViewObj.view;        
        if (tailView !== "|") {chainedViews.push(tailView);}
        parser.addPreds(tailView,tail[i][3].preds,d);
        result = [
          //"c",
          connection,
          result,
          tailView
        ];
        if (!(headViewObj.isPoint && tailViewObj.isPoint)) {
          withContainer = ( headView =="|" || tailView === "|");
          ccss = p.getLeftVar(headView, d, o, headViewObj) + " " 
            + p.getConnectionString(connection, d, o, withContainer) + " " 
            + p.getRightVar(tailView, d, o, tailViewObj)   
            + p.getTrailingOptions(o)
            + p.getSW(o);
          parser.addC(
            ccss.trim()
        );}
        headViewObj = tailViewObj;
        headView = tailView;
      }
      parser.addChains(chainedViews,o);
      return {'vfl':d, o:o};
    }
  / VFLPluralStatement

VFLPluralStatement
 = d:Dimension __ selector:NameChars+ __ o:Options __ s:StrengthAndWeight? {
   var ccss = "@chain ";
   selector = selector.join("").trim();   
   ccss += selector + " ";
   ccss += p.leftVarNames[d] + "(";
   if (o.gap) {
     ccss += "+" + o.gap;
   }
   ccss += ")" + p.rightVarNames[d];
   if (o.chains) {
     o.chains.forEach( function (chain) {
        ccss += " " + chain[0] + "("; 
        if (chain[1]) {
          if (chain[1].raw) {
            ccss += chain[1].raw;
          }
        }
        ccss += ")";
       });
   }
   ccss += p.getTrailingOptions(o);
   ccss += p.getSW(o);
   parser.addC(ccss.trim());
   return {vfl:d,o:o}
 }

Dimension
  = ("@horizontal" / "@-gss-horizontal" / "@-gss-h" / "@h") {return 0;}
  / ("@vertical" / "@-gss-vertical" / "@-gss-v" / "@v") {return 1;}


Options
  = os:Option*  {
    var obj = {};
    obj.chains = [];
    for (var i = 0; i < os.length; i++) {          
      // proccess chains
      if (!!os[i].chain) {
        obj.chains.push(os[i].chain);
      }
      // or just add option
      else {
        obj[os[i].key] = os[i].value;
      }            
    }
    return obj;
  }

Option 'Option'
  = __ chain:Chain { return chain; }
  / __ key:NameChars+ "(" value:OpionValueChars+ ")" {return {key:key.join(''), value:value.join('')};}
  / __ sw:StrengthAndWeight {return {key:"sw",value:sw}; }

OpionValueChars
  = [^>=<!)]

Chain 'Chain'
  = "chain-" prop:NameChars+ preds:ChainPredicate? { return {'chain':[prop.join(""),preds]};}

ChainPredicate 'ChainPredicate'
  = "(" items:ChainPredicateItems+ ")" {
    items.raw = "";
    items.forEach( function (item){
      items.raw += item.raw;
    });
    return items;
  }
  / "()" {return {raw:""};}


ChainPredicateItems
  = item:ChainPredicateItem _? ","? {
    item.raw = item.headEq + item.value + item.tailEq + item.s;
    return item;
  }

// TODO: make more DRY... if all rules are optional sends parser into infinite loop
ChainPredicateItem
  = headEq:PredEq _  value:ChainPredVal? _? tailEq:PredEq? _? s:StrengthAndWeight? {
      return {headEq:p.join(headEq),value:p.join(value),tailEq:p.join(tailEq),s:p.join(s)};}
  / headEq:PredEq? _? value:ChainPredVal _? tailEq:PredEq? _? s:StrengthAndWeight? {
      return {headEq:p.join(headEq),value:p.join(value),tailEq:p.join(tailEq),s:p.join(s)};}
  / headEq:PredEq? _? value:ChainPredVal? _? tailEq:PredEq? _? s:StrengthAndWeight {
      return {headEq:p.join(headEq),value:p.join(value),tailEq:p.join(tailEq),s:p.join(s)};}

ChainPredVal
  = [^>=<!) ]+

View "VFL Element"
  = "[" name:NameChars+ pred:Predicate? "]" 
    {return {view:p.stringify(name),preds:pred};}   
  / "|" name:([^~\-] NameChars+) pred:Predicate? "|" 
    {return {view:p.stringify(name),preds:pred};}
  /  point:Point       {return {view:"|", isPoint:true, pos:point};}
  / "|"                                   {return {view:"|"};}
  // errorr 

Point "Point" 
  = "<" _? position:[^>]+ _? ">" {
    return p.stringify(position);
  }

Predicate 'Predicate'
  = "(" preds:(PredEq PredExpression StrengthAndWeight? _? PredSeperator _?)+ ")" {return preds;}

PredExpression "Predicate Expression"
  = (PredOp / PredLiteral / PredVariable / PredViewVariable / PredView )+

PredEq
  = _? eq:("==" / "<=" / "<" / ">=" / ">" / "=<"{return "<=";} / "=>"{return ">=";}) _?  {return eq;}

PredOp 
  = op:[+\-/*] _? {return op;}

PredView
  = name:NameChars+ _? {return ["view",name.join("")];}

PredLiteral
  = n:Number+ _? {return n.join("");}

PredVariable
  = "[" name:NameChars+ "]" _?  {return "[" + name.join("") + "]";}

PredViewVariable
  = view:NameChars+ "[" prop:NameChars+ "]" _?  {return view.join("") + "[" + prop.join("") + "]";}

PredSeperator
  = ","? {return "";}

Connection "VFL Connection"
  = "-" gap:GapChars+ "-"  {return {op:"==",gap:gap.join("")};}
  / "-"                    {return {op:"==",gap:"__STANDARD__"};}
  / "~" gap:GapChars+ "~"  {return {op:"<=",gap:gap.join("")};}
  / "~" "-" "~"            {return {op:"<=",gap:"__STANDARD__"};}
  / "~"                    {return {op:"<="};}
  / ""                     {return {op:"=="};}

GapChars "VFL Connection Gap"
  = [a-zA-Z0-9#._$]

  
StrengthAndWeight "Strength / Weight"
  = "!" s:([a-zA-Z]+)? w:([0-9]+)? { 
    var val;
    val = "!" + p.join(s) + p.join(w);
    return val.trim();
  }
  / "!" .? {
    throw new SyntaxError('Invalid Strength or Weight', null, null, null, line(), column());
  }

NameChars
  = [a-zA-Z0-9#.\-_$:""]

NameCharsWithSpace
  = NameChars / " "

Literal
  = val:Number {
    return [ "number",
      val
    ];
  }

Number
  = Real / Integer

Integer
  = digits:[0-9]+ {
    return parseInt(digits.join(""), 10);
  }

Real
  = digits:(Integer "." Integer) {
    return parseFloat(digits.join(""));
  }

SignedInteger
  = [-+]? [0-9]+

SourceCharacter
  = .

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]

LineTerminator
  = [\n\r\u2028\u2029]

LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator

EOS
  = __ ";"
  / _ LineTerminatorSequence
  / __ EOF

EOF
  = !.

Comment "comment"
  = MultiLineComment
  / SingleLineComment

MultiLineComment
  = "/*" (!"*/" SourceCharacter)* "*/"

MultiLineCommentNoLineTerminator
  = "/*" (!("*/" / LineTerminator) SourceCharacter)* "*/"

SingleLineComment
  = "//" (!LineTerminator SourceCharacter)* (LineTerminator / EOF)
_
  = (WhiteSpace / MultiLineCommentNoLineTerminator / SingleLineComment)*

__
  = (WhiteSpace / LineTerminatorSequence / Comment)*
